#!/usr/bin/python

import argparse
import urllib2
import json
import commands
import subprocess
import paramiko.agent
import base64
import hashlib
import os.path
import sys
import getpass

home = os.path.expanduser("~")

def getCmdFromArgs(args):
  return { 'command': args.__command
         , 'options': [[k.replace('_', '-'), v] for k, v in vars(args).items() if k != '__command' and v is not None]
         }

def getCmdString(cmd):
  return cmd['command'] + ''.join(sorted([k + str(v) for k, v in cmd['options']]))

def listHasOption(options, option):
  for v in options:
    if v['name'] == option:
      return True

  return False

def cmdHasOption(cmd, option):
  for k, v in cmd['options']:
    if k == option:
      return v

  return None

def cmdSetOption(cmd, option, value):
  option_exists = False
  for k, v in cmd['options']:
    if k == option:
      option_exists = True

  if option_exists:
    cmd['options'] = [[k, value] if k == option else [k, v] for k, v in cmd['options']]
  else:
    cmd['options'] = cmd['options'] + [[option, value]]

def cmdDeleteOption(cmd, option):
  cmd['options'] = [[k, v] for k, v in cmd['options'] if k != option]

def getSignedCmd(host, cmd):
  cmdString = getCmdString(cmd)
  cmdHash = hashlib.sha1(cmdString).hexdigest()
  response = urllib2.urlopen(host + '/dh', json.dumps({ 'hash': cmdHash }))

  svRandBlob = json.load(response)['response']
  svRand = base64.b64decode(svRandBlob)

  agent = paramiko.Agent()
  keys = agent.get_keys()

  if len(keys) < 1:
    subprocess.call('ssh-add')
    agent = paramiko.Agent()
    keys = agent.get_keys()

  pubkeySha1 = ''

  with open(home + '/.ssh/id_rsa.pub', 'r') as content_file:
    pubkey = content_file.read()
    pubkeySha1 = hashlib.sha1(pubkey).hexdigest()

  sig = base64.b64encode(keys[0].sign_ssh_data(svRand + cmdString.encode('utf-8')))

  sigCmd = dict(cmd)
  sigCmd['sig'] = [pubkeySha1, sig]
  return sigCmd

def _promptOption(prompt_type, prefix, option):
  value = ''

  if prompt_type == 'prompt':
    value = raw_input(prefix + option + ': ')
  else:
    if prompt_type == 'invisible':
      value = getpass.getpass(prefix + option + ': ')

  return value

def promptOption(prompt, option):
  prompt_type, repeat = prompt

  value = _promptOption(prompt_type, 'Enter ', option.replace('-', ' '))

  if repeat:
    value2 = _promptOption(prompt_type, 'Repeat ', option.replace('-', ' '))

    if value != value2:
      print 'Entered values do not match'
      sys.exit(0)

  return value

def getHost():
  host = None

  if len(sys.argv) > 1 and sys.argv[1] != '-h':
    host = sys.argv[1]
  elif len(sys.argv) > 2 and sys.argv[2] != '-h':
    host = sys.argv[2]

  if host != None and (not host.startswith('http') and not host.startswith('https')):
    host = 'http://' + host

  return host

try:
# Parser configuration
  parser = argparse.ArgumentParser(description='User configuration utility')
  parser.add_argument('host')

# Get supported commands
  host = getHost()
  if host != None:
    response = urllib2.urlopen(host + '/info')
    data = json.load(response)

    commands = data['response']

    subparsers = parser.add_subparsers(title='commands', dest='__command', help='-h gives command help')

    for _, command in commands:
      subparser = subparsers.add_parser(command['name'], help=command['description'])

      if 'options' in command:
        for option in command['options']:
          if not 'prompt' in option:
            opt_required = option.get('required', False)
            if option['name'] == 'ssh-key':
              subparser.add_argument('-' + option['short'], '--' + option['name'], help=option['description'], action='store_true', required=opt_required)
            else:
              subparser.add_argument('-' + option['short'], '--' + option['name'], help=option['description'], required=opt_required)

  args = parser.parse_args()

  cmd = getCmdFromArgs(args)
  cmdInfo = dict(commands)[args.__command]
  cmdOptions = cmdInfo['options']

  if listHasOption(cmdOptions, 'ssh-key') and cmdHasOption(cmd, 'ssh-key') == True:
    with open(home + '/.ssh/id_rsa.pub', 'r') as content_file:
      cmdSetOption(cmd, 'ssh-key', content_file.read())
  else:
    cmdDeleteOption(cmd, 'ssh-key')

  if 'confirm' in cmdInfo:
    answer = raw_input('Do you really want to do that? [Y/n]: ')

    if answer != 'Y':
      sys.exit(0)

  for option in cmdOptions:
    if (('auth' in cmdInfo and option['name'] != 'password') or not 'auth' in cmdInfo) and 'prompt' in option:
      cmdSetOption(cmd, option['name'], promptOption(option['prompt'], option['name']))

  if 'auth' in cmdInfo:
    print 'Trying pubkey auth...',
    cmd = getSignedCmd(host, cmd)

  response = urllib2.urlopen(host + '/command', json.dumps(cmd))
  response = json.load(response)

  if response['status'] == 'error' and response['error']['code'] == 'auth' and 'auth' in cmdInfo:
    if 'auth' in cmdInfo:
      print 'failed'

    option = None
    for o in cmdOptions:
      if o['name'] == 'password':
        option = o

    if o != None:
      cmdSetOption(cmd, option['name'], promptOption(option['prompt'], option['name']))

      response = urllib2.urlopen(host + '/command', json.dumps(cmd))
      response = json.load(response)
  else:
    if 'auth' in cmdInfo:
      print 'ok'

  if response['status'] == 'error':
    print 'Command execution failed: ' + response['error']['code']

except argparse.ArgumentError, exc:
    print exc.message, '\n', exc.argument
